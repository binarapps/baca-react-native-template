/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * API
 * API documentation for the starter-kit project in NestJS by BinarApps. The API allows management of users, sessions and offers various functions for logged in users. Contains examples of authentication, authorization, and CRUD for selected resources.
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query'
import type { MutationFunction, UseMutationOptions, UseMutationResult } from '@tanstack/react-query'

import { customInstance } from '../../axios/custom-instance'
import type { ErrorType, BodyType } from '../../axios/custom-instance'
import type {
  AppVersionStatusEntity,
  CheckUpdateDto,
  ErrorServerEntity,
  ErrorTooManyRequestsEntity,
  ErrorValidationEntity,
} from '../../types'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const systemControllerCheckForAppUpdate = (
  checkUpdateDto: BodyType<CheckUpdateDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AppVersionStatusEntity>(
    {
      url: `/api/v1/system/app-updates/check`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: checkUpdateDto,
      signal,
    },
    options
  )
}

export const getSystemControllerCheckForAppUpdateMutationOptions = <
  TData = Awaited<ReturnType<typeof systemControllerCheckForAppUpdate>>,
  TError = ErrorType<void | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: BodyType<CheckUpdateDto> }, TContext>
  request?: SecondParameter<typeof customInstance>
}) => {
  const mutationKey = ['systemControllerCheckForAppUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof systemControllerCheckForAppUpdate>>,
    { data: BodyType<CheckUpdateDto> }
  > = (props) => {
    const { data } = props ?? {}

    return systemControllerCheckForAppUpdate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: BodyType<CheckUpdateDto> },
    TContext
  >
}

export type SystemControllerCheckForAppUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof systemControllerCheckForAppUpdate>>
>
export type SystemControllerCheckForAppUpdateMutationBody = BodyType<CheckUpdateDto>
export type SystemControllerCheckForAppUpdateMutationError = ErrorType<
  void | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
>

export const useSystemControllerCheckForAppUpdate = <
  TData = Awaited<ReturnType<typeof systemControllerCheckForAppUpdate>>,
  TError = ErrorType<void | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: BodyType<CheckUpdateDto> }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<TData, TError, { data: BodyType<CheckUpdateDto> }, TContext> => {
  const mutationOptions = getSystemControllerCheckForAppUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
