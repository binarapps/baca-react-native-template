/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * API
 * API documentation for the starter-kit project in NestJS by BinarApps. The API allows management of users, sessions and offers various functions for logged in users. Contains examples of authentication, authorization, and CRUD for selected resources.
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customInstance } from '../../axios/custom-instance'
import type { ErrorType } from '../../axios/custom-instance'
import type { ErrorEntity, HealthEntity } from '../../types'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * Performs a health check, verifying the database, frontend domain, and cache connectivity.
 * @summary Check Health
 */
export const healthControllerCheck = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<HealthEntity>({ url: `/api/v1/health`, method: 'GET', signal }, options)
}

export const getHealthControllerCheckQueryKey = () => {
  return [`/api/v1/health`] as const
}

export const getHealthControllerCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof healthControllerCheck>>,
  TError = ErrorType<ErrorEntity | void>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof healthControllerCheck>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getHealthControllerCheckQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof healthControllerCheck>>> = ({ signal }) =>
    healthControllerCheck(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof healthControllerCheck>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthControllerCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthControllerCheck>>
>
export type HealthControllerCheckQueryError = ErrorType<ErrorEntity | void>

export function useHealthControllerCheck<
  TData = Awaited<ReturnType<typeof healthControllerCheck>>,
  TError = ErrorType<ErrorEntity | void>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof healthControllerCheck>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof healthControllerCheck>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthControllerCheck<
  TData = Awaited<ReturnType<typeof healthControllerCheck>>,
  TError = ErrorType<ErrorEntity | void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof healthControllerCheck>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof healthControllerCheck>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthControllerCheck<
  TData = Awaited<ReturnType<typeof healthControllerCheck>>,
  TError = ErrorType<ErrorEntity | void>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof healthControllerCheck>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Check Health
 */

export function useHealthControllerCheck<
  TData = Awaited<ReturnType<typeof healthControllerCheck>>,
  TError = ErrorType<ErrorEntity | void>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof healthControllerCheck>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getHealthControllerCheckQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
