/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * API
 * API documentation for the starter-kit project in NestJS by BinarApps. The API allows management of users, sessions and offers various functions for logged in users. Contains examples of authentication, authorization, and CRUD for selected resources.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customInstance } from '../../axios/custom-instance'
import type { ErrorType, BodyType } from '../../axios/custom-instance'
import type {
  AuthConfirmEmailChangeDto,
  AuthConfirmEmailDto,
  AuthEmailChangeDto,
  AuthEmailLoginDto,
  AuthEntity,
  AuthForgotPasswordDto,
  AuthRegisterLoginDto,
  AuthResendVerificationEmailDto,
  AuthResetPasswordDto,
  AuthUpdateDto,
  ErrorEntity,
  ErrorServerEntity,
  ErrorTooManyRequestsEntity,
  ErrorUnauthorizedEntity,
  ErrorValidationEntity,
  RefreshEntity,
  UserEntity,
} from '../../types'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * Logs the user into the system and returns access tokens
 * @summary User Login
 */
export const authControllerLogin = (
  authEmailLoginDto: BodyType<AuthEmailLoginDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<AuthEntity>(
    {
      url: `/api/v1/auth/email/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authEmailLoginDto,
    },
    options
  )
}

export const getAuthControllerLoginMutationOptions = <
  TError = ErrorType<
    | ErrorUnauthorizedEntity
    | ErrorEntity
    | ErrorValidationEntity
    | ErrorTooManyRequestsEntity
    | ErrorServerEntity
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: BodyType<AuthEmailLoginDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: BodyType<AuthEmailLoginDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: BodyType<AuthEmailLoginDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerLogin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>
export type AuthControllerLoginMutationBody = BodyType<AuthEmailLoginDto>
export type AuthControllerLoginMutationError = ErrorType<
  | ErrorUnauthorizedEntity
  | ErrorEntity
  | ErrorValidationEntity
  | ErrorTooManyRequestsEntity
  | ErrorServerEntity
>

/**
 * @summary User Login
 */
export const useAuthControllerLogin = <
  TError = ErrorType<
    | ErrorUnauthorizedEntity
    | ErrorEntity
    | ErrorValidationEntity
    | ErrorTooManyRequestsEntity
    | ErrorServerEntity
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: BodyType<AuthEmailLoginDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: BodyType<AuthEmailLoginDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Registers a new user with email and password
 * @summary User Registration
 */
export const authControllerRegister = (
  authRegisterLoginDto: BodyType<AuthRegisterLoginDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UserEntity>(
    {
      url: `/api/v1/auth/email/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authRegisterLoginDto,
    },
    options
  )
}

export const getAuthControllerRegisterMutationOptions = <
  TError = ErrorType<void | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: BodyType<AuthRegisterLoginDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: BodyType<AuthRegisterLoginDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegister>>,
    { data: BodyType<AuthRegisterLoginDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerRegister(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>
export type AuthControllerRegisterMutationBody = BodyType<AuthRegisterLoginDto>
export type AuthControllerRegisterMutationError = ErrorType<
  void | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
>

/**
 * @summary User Registration
 */
export const useAuthControllerRegister = <
  TError = ErrorType<void | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: BodyType<AuthRegisterLoginDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: BodyType<AuthRegisterLoginDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerRegisterMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Confirms the user's email address using the provided confirmation hash.
 * @summary Confirm Email
 */
export const authControllerConfirmEmail = (
  authConfirmEmailDto: BodyType<AuthConfirmEmailDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/api/v1/auth/email/confirm`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authConfirmEmailDto,
    },
    options
  )
}

export const getAuthControllerConfirmEmailMutationOptions = <
  TError = ErrorType<void | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerConfirmEmail>>,
    TError,
    { data: BodyType<AuthConfirmEmailDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerConfirmEmail>>,
  TError,
  { data: BodyType<AuthConfirmEmailDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerConfirmEmail>>,
    { data: BodyType<AuthConfirmEmailDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerConfirmEmail(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerConfirmEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerConfirmEmail>>
>
export type AuthControllerConfirmEmailMutationBody = BodyType<AuthConfirmEmailDto>
export type AuthControllerConfirmEmailMutationError = ErrorType<
  void | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
>

/**
 * @summary Confirm Email
 */
export const useAuthControllerConfirmEmail = <
  TError = ErrorType<void | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerConfirmEmail>>,
    TError,
    { data: BodyType<AuthConfirmEmailDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerConfirmEmail>>,
  TError,
  { data: BodyType<AuthConfirmEmailDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerConfirmEmailMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Resend the verification email to the user's email address.
 * @summary Resend Verification Email
 */
export const authControllerResendVerificationEmail = (
  authResendVerificationEmailDto: BodyType<AuthResendVerificationEmailDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/api/v1/auth/email/resend`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authResendVerificationEmailDto,
    },
    options
  )
}

export const getAuthControllerResendVerificationEmailMutationOptions = <
  TError = ErrorType<
    ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerResendVerificationEmail>>,
    TError,
    { data: BodyType<AuthResendVerificationEmailDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerResendVerificationEmail>>,
  TError,
  { data: BodyType<AuthResendVerificationEmailDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerResendVerificationEmail>>,
    { data: BodyType<AuthResendVerificationEmailDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerResendVerificationEmail(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerResendVerificationEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerResendVerificationEmail>>
>
export type AuthControllerResendVerificationEmailMutationBody =
  BodyType<AuthResendVerificationEmailDto>
export type AuthControllerResendVerificationEmailMutationError = ErrorType<
  ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
>

/**
 * @summary Resend Verification Email
 */
export const useAuthControllerResendVerificationEmail = <
  TError = ErrorType<
    ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerResendVerificationEmail>>,
    TError,
    { data: BodyType<AuthResendVerificationEmailDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerResendVerificationEmail>>,
  TError,
  { data: BodyType<AuthResendVerificationEmailDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerResendVerificationEmailMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Initiates the password reset process by sending an email with a reset link to the user's email address.
 * @summary Forgot Password
 */
export const authControllerForgotPassword = (
  authForgotPasswordDto: BodyType<AuthForgotPasswordDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/api/v1/auth/forgot/password`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authForgotPasswordDto,
    },
    options
  )
}

export const getAuthControllerForgotPasswordMutationOptions = <
  TError = ErrorType<
    ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerForgotPassword>>,
    TError,
    { data: BodyType<AuthForgotPasswordDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerForgotPassword>>,
  TError,
  { data: BodyType<AuthForgotPasswordDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerForgotPassword>>,
    { data: BodyType<AuthForgotPasswordDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerForgotPassword(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerForgotPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerForgotPassword>>
>
export type AuthControllerForgotPasswordMutationBody = BodyType<AuthForgotPasswordDto>
export type AuthControllerForgotPasswordMutationError = ErrorType<
  ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
>

/**
 * @summary Forgot Password
 */
export const useAuthControllerForgotPassword = <
  TError = ErrorType<
    ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerForgotPassword>>,
    TError,
    { data: BodyType<AuthForgotPasswordDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerForgotPassword>>,
  TError,
  { data: BodyType<AuthForgotPasswordDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerForgotPasswordMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Resets the user's password using the provided reset password hash.
 * @summary Reset Password
 */
export const authControllerResetPassword = (
  authResetPasswordDto: BodyType<AuthResetPasswordDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/api/v1/auth/reset/password`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authResetPasswordDto,
    },
    options
  )
}

export const getAuthControllerResetPasswordMutationOptions = <
  TError = ErrorType<
    ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerResetPassword>>,
    TError,
    { data: BodyType<AuthResetPasswordDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerResetPassword>>,
  TError,
  { data: BodyType<AuthResetPasswordDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerResetPassword>>,
    { data: BodyType<AuthResetPasswordDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerResetPassword(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerResetPassword>>
>
export type AuthControllerResetPasswordMutationBody = BodyType<AuthResetPasswordDto>
export type AuthControllerResetPasswordMutationError = ErrorType<
  ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
>

/**
 * @summary Reset Password
 */
export const useAuthControllerResetPassword = <
  TError = ErrorType<
    ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerResetPassword>>,
    TError,
    { data: BodyType<AuthResetPasswordDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerResetPassword>>,
  TError,
  { data: BodyType<AuthResetPasswordDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerResetPasswordMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Initiates the process to change the user's email address. After initialization, the user must confirm the email address change through another endpoint.
 * @summary Initialize Email Change
 */
export const authControllerEmailChange = (
  authEmailChangeDto: BodyType<AuthEmailChangeDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/api/v1/auth/email/change`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authEmailChangeDto,
    },
    options
  )
}

export const getAuthControllerEmailChangeMutationOptions = <
  TError = ErrorType<
    ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerEmailChange>>,
    TError,
    { data: BodyType<AuthEmailChangeDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerEmailChange>>,
  TError,
  { data: BodyType<AuthEmailChangeDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerEmailChange>>,
    { data: BodyType<AuthEmailChangeDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerEmailChange(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerEmailChangeMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerEmailChange>>
>
export type AuthControllerEmailChangeMutationBody = BodyType<AuthEmailChangeDto>
export type AuthControllerEmailChangeMutationError = ErrorType<
  ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
>

/**
 * @summary Initialize Email Change
 */
export const useAuthControllerEmailChange = <
  TError = ErrorType<
    ErrorEntity | ErrorValidationEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
  >,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerEmailChange>>,
    TError,
    { data: BodyType<AuthEmailChangeDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerEmailChange>>,
  TError,
  { data: BodyType<AuthEmailChangeDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerEmailChangeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Confirms the change of a user's email address using a verification code sent to the new email. This endpoint validates the verification code (hash) received by the user to complete the email address change process.
 * @summary Confirm Email Change
 */
export const authControllerConfirmEmailChange = (
  authConfirmEmailChangeDto: BodyType<AuthConfirmEmailChangeDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/api/v1/auth/email/change-confirm`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: authConfirmEmailChangeDto,
    },
    options
  )
}

export const getAuthControllerConfirmEmailChangeMutationOptions = <
  TError = ErrorType<ErrorEntity | ErrorTooManyRequestsEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerConfirmEmailChange>>,
    TError,
    { data: BodyType<AuthConfirmEmailChangeDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerConfirmEmailChange>>,
  TError,
  { data: BodyType<AuthConfirmEmailChangeDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerConfirmEmailChange>>,
    { data: BodyType<AuthConfirmEmailChangeDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerConfirmEmailChange(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerConfirmEmailChangeMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerConfirmEmailChange>>
>
export type AuthControllerConfirmEmailChangeMutationBody = BodyType<AuthConfirmEmailChangeDto>
export type AuthControllerConfirmEmailChangeMutationError = ErrorType<
  ErrorEntity | ErrorTooManyRequestsEntity | ErrorServerEntity
>

/**
 * @summary Confirm Email Change
 */
export const useAuthControllerConfirmEmailChange = <
  TError = ErrorType<ErrorEntity | ErrorTooManyRequestsEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerConfirmEmailChange>>,
    TError,
    { data: BodyType<AuthConfirmEmailChangeDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerConfirmEmailChange>>,
  TError,
  { data: BodyType<AuthConfirmEmailChangeDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerConfirmEmailChangeMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Retrieves information about the current authenticated user
 * @summary Get Current User
 */
export const authControllerMe = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserEntity>({ url: `/api/v1/auth/me`, method: 'GET', signal }, options)
}

export const getAuthControllerMeQueryKey = () => {
  return [`/api/v1/auth/me`] as const
}

export const getAuthControllerMeQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerMe>>,
  TError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof authControllerMe>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAuthControllerMeQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerMe>>> = ({ signal }) =>
    authControllerMe(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerMe>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AuthControllerMeQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerMe>>>
export type AuthControllerMeQueryError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>

/**
 * @summary Get Current User
 */

export function useAuthControllerMe<
  TData = Awaited<ReturnType<typeof authControllerMe>>,
  TError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof authControllerMe>>, TError, TData>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAuthControllerMeQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Updates information about the current authenticated user
 * @summary Update Current User
 */
export const authControllerUpdate = (
  authUpdateDto: BodyType<AuthUpdateDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/api/v1/auth/me`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: authUpdateDto,
    },
    options
  )
}

export const getAuthControllerUpdateMutationOptions = <
  TError = ErrorType<ErrorUnauthorizedEntity | void | ErrorEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerUpdate>>,
    TError,
    { data: BodyType<AuthUpdateDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerUpdate>>,
  TError,
  { data: BodyType<AuthUpdateDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerUpdate>>,
    { data: BodyType<AuthUpdateDto> }
  > = (props) => {
    const { data } = props ?? {}

    return authControllerUpdate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerUpdate>>
>
export type AuthControllerUpdateMutationBody = BodyType<AuthUpdateDto>
export type AuthControllerUpdateMutationError = ErrorType<
  ErrorUnauthorizedEntity | void | ErrorEntity | ErrorServerEntity
>

/**
 * @summary Update Current User
 */
export const useAuthControllerUpdate = <
  TError = ErrorType<ErrorUnauthorizedEntity | void | ErrorEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerUpdate>>,
    TError,
    { data: BodyType<AuthUpdateDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerUpdate>>,
  TError,
  { data: BodyType<AuthUpdateDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Deletes the current authenticated user
 * @summary Delete Current User
 */
export const authControllerDelete = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<unknown>({ url: `/api/v1/auth/me`, method: 'DELETE' }, options)
}

export const getAuthControllerDeleteMutationOptions = <
  TError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerDelete>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerDelete>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerDelete>>,
    void
  > = () => {
    return authControllerDelete(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerDelete>>
>

export type AuthControllerDeleteMutationError = ErrorType<
  ErrorUnauthorizedEntity | ErrorServerEntity
>

/**
 * @summary Delete Current User
 */
export const useAuthControllerDelete = <
  TError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerDelete>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof authControllerDelete>>, TError, void, TContext> => {
  const mutationOptions = getAuthControllerDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Refreshes the access token using the refresh token
 * @summary Refresh Access Token
 */
export const authControllerRefresh = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<RefreshEntity>({ url: `/api/v1/auth/refresh`, method: 'POST' }, options)
}

export const getAuthControllerRefreshMutationOptions = <
  TError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRefresh>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    void
  > = () => {
    return authControllerRefresh(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRefresh>>
>

export type AuthControllerRefreshMutationError = ErrorType<
  ErrorUnauthorizedEntity | ErrorServerEntity
>

/**
 * @summary Refresh Access Token
 */
export const useAuthControllerRefresh = <
  TError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRefresh>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerRefreshMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Logs the user out of the system
 * @summary Logout
 */
export const authControllerLogout = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<unknown>({ url: `/api/v1/auth/logout`, method: 'POST' }, options)
}

export const getAuthControllerLogoutMutationOptions = <
  TError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogout>>,
    void
  > = () => {
    return authControllerLogout(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>

export type AuthControllerLogoutMutationError = ErrorType<
  ErrorUnauthorizedEntity | ErrorServerEntity
>

/**
 * @summary Logout
 */
export const useAuthControllerLogout = <
  TError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof authControllerLogout>>, TError, void, TContext> => {
  const mutationOptions = getAuthControllerLogoutMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Logs the user out of all active sessions to enhance security in case of unauthorized access or when changing sensitive account information like passwords
 * @summary Logout all sessions
 */
export const authControllerLogoutAll = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<unknown>({ url: `/api/v1/auth/logout/all`, method: 'POST' }, options)
}

export const getAuthControllerLogoutAllMutationOptions = <
  TError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogoutAll>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogoutAll>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogoutAll>>,
    void
  > = () => {
    return authControllerLogoutAll(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerLogoutAllMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogoutAll>>
>

export type AuthControllerLogoutAllMutationError = ErrorType<
  ErrorUnauthorizedEntity | ErrorServerEntity
>

/**
 * @summary Logout all sessions
 */
export const useAuthControllerLogoutAll = <
  TError = ErrorType<ErrorUnauthorizedEntity | ErrorServerEntity>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogoutAll>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogoutAll>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerLogoutAllMutationOptions(options)

  return useMutation(mutationOptions)
}
